/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.50
 * Generated at: 2022-05-12 15:45:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.user.gioi_002dthieu;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class bao_002dmat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<div id=\"content\" class=\"site-content\" tabindex=\"-1\">\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("		<nav class=\"woocommerce-breadcrumb\"><a href=\"https://ldstore.vn\">Trang chủ</a><span class=\"delimiter\"><i class=\"fa fa-angle-right\"></i></span>Chính sách bảo mật</nav><div class=\"site-content-inner row\">\r\n");
      out.write("<div id=\"primary\" class=\"content-area\">\r\n");
      out.write("	<main id=\"main\" class=\"site-main\">\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("<article id=\"post-12143\" class=\"post-12143 page type-page status-publish hentry\">\r\n");
      out.write("\r\n");
      out.write("					<header class=\"entry-header\">\r\n");
      out.write("					<h1 class=\"entry-title\">Chính sách bảo mật</h1>\r\n");
      out.write("									</header><!-- .entry-header -->\r\n");
      out.write("						<div class=\"entry-content\">\r\n");
      out.write("			\r\n");
      out.write("<p><strong>CHÍNH SÁCH BẢO VỆ THÔNG TIN\r\n");
      out.write("CÁ NHÂN KHÁCH HÀNG</strong></p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<ul><li><strong>Mục\r\n");
      out.write("đích và phạm vi thu thập thông tin</strong></li></ul>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>Việc\r\n");
      out.write("thu thập dữ liệu trên website ldstore.vn bao gồm: email, điện thoại, tên đăng\r\n");
      out.write("nhập, mật khẩu đăng nhập, địa chỉ khách hàng (thành viên). Đây là các thông tin\r\n");
      out.write("mà ldstore.vn cần thành viên cung cấp bắt buộc khi đăng ký sử dụng dịch vụ và để\r\n");
      out.write("ldstore.vn liên hệ xác nhận khi khách hàng đăng ký sử dụng dịch vụ trên website\r\n");
      out.write("nhằm đảm bảo quyền lợi cho cho người tiêu dùng. </p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>Các\r\n");
      out.write("thành viên sẽ tự chịu trách nhiệm về bảo mật và lưu giữ mọi hoạt động sử dụng dịch\r\n");
      out.write("vụ dưới tên đăng ký, mật khẩu và hộp thư điện tử của mình. Ngoài ra, thành viên\r\n");
      out.write("có trách nhiệm thông báo kịp thời cho ldstore.vn về những hành vi sử dụng trái\r\n");
      out.write("phép, lạm dụng, vi phạm bảo mật, lưu giữ tên đăng ký và mật khẩu của bên thứ ba\r\n");
      out.write("để có biện pháp giải quyết phù hợp. </p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<ul><li><strong>Phạm vi\r\n");
      out.write("sử dụng thông tin</strong></li></ul>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>Website ldstore.vn sử dụng\r\n");
      out.write("thông tin thành viên cung cấp để:</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Cung cấp các dịch vụ đến\r\n");
      out.write("Thành viên;</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Gửi các thông báo về các hoạt\r\n");
      out.write("động trao đổi thông tin giữa thành viên và ldstore.vn; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Ngăn ngừa các hoạt động phá hủy\r\n");
      out.write("tài khoản người dùng của thành viên hoặc các hoạt động giả mạo Thành viên;</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Liên lạc và giải quyết với\r\n");
      out.write("thành viên trong những trường hợp đặc biệt.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Không sử dụng thông tin cá\r\n");
      out.write("nhân của thành viên ngoài mục đích xác nhận và liên hệ có liên quan đến giao dịch\r\n");
      out.write("tại ldstore.vn. </p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Trong trường hợp có yêu cầu của\r\n");
      out.write("pháp luật: ldstore.vn có trách nhiệm hợp tác cung cấp thông tin cá nhân thành\r\n");
      out.write("viên khi có yêu cầu từ cơ quan tư pháp bao gồm: Viện kiểm sát, tòa án, cơ quan\r\n");
      out.write("công an điều tra liên quan đến hành vi vi phạm pháp luật nào đó của khách hàng.\r\n");
      out.write("Ngoài ra, không ai có quyền xâm phạm vào thông tin cá nhân của thành viên.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<ul><li><strong>Thời\r\n");
      out.write("gian lưu trữ thông tin</strong></li></ul>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>&nbsp;Dữ liệu cá nhân của Thành viên sẽ được lưu trữ\r\n");
      out.write("cho đến khi có yêu cầu hủy bỏ hoặc tự thành viên đăng nhập và thực hiện hủy bỏ.\r\n");
      out.write("Còn lại trong mọi trường hợp thông tin cá nhân thành viên sẽ được bảo mật trên\r\n");
      out.write("máy chủ của ldstore.vn. </p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<ul><li><strong>Địa chỉ\r\n");
      out.write("của đơn vị thu thập và quản lý thông tin cá nhân</strong></li></ul>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p><strong>HỘ KINH DOANH LD STORE – PHỤ KIỆN THÔNG MINH</strong><strong></strong></p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>+ Trụ sở chính:\r\n");
      out.write("Số 157, phố Trần Quốc Hoàn, phường Dịch Vọng Hậu, quận Cầu Giấy, thành phố Hà Nội</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>+ Điện thoại: 0943678891&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Email: ldstorevn8@gmail.com</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<ul><li><strong>Phương\r\n");
      out.write("tiện và công cụ để người dùng tiếp cận và chỉnh sửa dữ liệu cá nhân của mình.</strong></li></ul>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Thành\r\n");
      out.write("viên có quyền tự kiểm tra, cập nhật, điều chỉnh hoặc hủy bỏ thông tin cá nhân của\r\n");
      out.write("mình bằng cách đăng nhập vào tài khoản và chỉnh sửa thông tin cá nhân hoặc yêu\r\n");
      out.write("cầu ban quản trị website ldstore.vn thực hiện việc này.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Thành\r\n");
      out.write("viên có quyền gửi khiếu nại về việc lộ thông tin cá nhân cho bên thứ 3 đến Ban\r\n");
      out.write("quản trị của website ldstore.vn. Khi tiếp nhận những phản hồi này, ldstore.vn sẽ\r\n");
      out.write("xác nhận lại thông tin, phải có trách nhiệm trả lời lý do và hướng dẫn thành\r\n");
      out.write("viên khôi phục và bảo mật lại thông tin.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<ul><li><strong>Cam kết\r\n");
      out.write("bảo mật thông tin cá nhân khách hàng</strong></li></ul>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p><strong>– </strong>Thông\r\n");
      out.write("tin cá nhân của thành viên trên website ldstore.vn được ldstore.vn cam kết bảo\r\n");
      out.write("mật tuyệt đối theo chính sách bảo vệ thông tin cá nhân của ldstore.vn. Việc thu\r\n");
      out.write("thập và sử dụng thông tin của mỗi thành viên chỉ được thực hiện khi có sự đồng\r\n");
      out.write("ý của khách hàng đó trừ những trường hợp pháp luật có quy định khác.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Không sử dụng, không chuyển\r\n");
      out.write("giao, cung cấp hay tiết lộ cho bên thứ 3 nào về thông tin cá nhân của thành\r\n");
      out.write("viên khi không có sự cho phép đồng ý từ thành viên.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Trong trường hợp máy chủ lưu\r\n");
      out.write("trữ thông tin bị hacker tấn công dẫn đến mất mát dữ liệu cá nhân thành viên, website\r\n");
      out.write("ldstore.vn sẽ có trách nhiệm thông báo vụ việc cho cơ quan chức năng điều tra xử\r\n");
      out.write("lý kịp thời và thông báo cho thành viên được biết.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Bảo mật tuyệt đối mọi thông\r\n");
      out.write("tin giao dịch trực tuyến của Thành viên bao gồm thông tin hóa đơn kế toán chứng\r\n");
      out.write("từ số hóa tại khu vực dữ liệu trung tâm an toàn cấp 1 của ldstore.vn. </p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>– Ban quản lý website ldstore.vn yêu cầu các cá nhân khi đăng ký/mua hàng là thành viên, phải cung cấp đầy đủ thông tin cá nhân có liên quan như: Họ và tên, địa chỉ liên lạc, email, số chứng minh nhân dân, điện thoại, số tài khoản, số thẻ thanh toán …., và chịu trách nhiệm về tính pháp lý của những thông tin trên. Ban quản lý website ldstore.vn không chịu trách nhiệm cũng như không giải quyết mọi khiếu nại có liên quan đến quyền lợi của Thành viên đó nếu xét thấy tất cả thông tin cá nhân của thành viên đó cung cấp khi đăng ký ban đầu là không chính xác.</p>\r\n");
      out.write("		</div><!-- .entry-content -->\r\n");
      out.write("			\r\n");
      out.write("</article><!-- #post-## -->\r\n");
      out.write("\r\n");
      out.write("	</main><!-- #main -->\r\n");
      out.write("</div><!-- #primary -->\r\n");
      out.write("\r\n");
      out.write("			</div>		</div><!-- .col-full -->\r\n");
      out.write("	</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
